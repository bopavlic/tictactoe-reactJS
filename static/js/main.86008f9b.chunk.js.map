{"version":3,"sources":["Components/Square.js","Patterns.js","App.js","reportWebVitals.js","index.js"],"names":["Square","value","chooseSquare","onClick","className","Patterns","App","useState","board","setBoard","player","setPlayer","winner","state","result","setResult","useEffect","checkWin","checkTie","alert","restartGame","square","map","index","filled","forEach","currentPattern","firstPlayer","foundWinningPattern","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86008f9b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nfunction Square({ value, chooseSquare }) {\r\n  return (\r\n    <div onClick={chooseSquare} className=\"square\">\r\n      {value}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","export const Patterns = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6],\r\n];\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Square from \"./Components/Square\";\nimport { Patterns } from \"./Patterns\";\n\nfunction App() {\n  const [board, setBoard] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n  const [player, setPlayer] = useState(\"0\");\n  const [result, setResult] = useState({ winner: \"none\", state: \"none\" });\n\n  useEffect(() => {\n    checkWin();\n    checkTie();\n\n    if (player === \"X\") {\n      setPlayer(\"0\");\n    } else {\n      setPlayer(\"X\");\n    }\n  }, [board]);\n\n  useEffect(() => {\n    if (result.state !== \"none\") {\n      alert(`Game finished! Winning player: ${result.winner}`);\n      restartGame();\n    }\n  }, [result]);\n\n  //placing X or 0 to the board\n  const chooseSquare = (square) => {\n    setBoard(\n      board.map((value, index) => {\n        if (index === square && value === \"\") {\n          return player;\n        }\n        return value;\n      })\n    );\n  };\n\n  //checking for tie\n  const checkTie = () => {\n    let filled = true;\n    board.forEach((square) => {\n      if (square === \"\") {\n        filled = false;\n      }\n    });\n    if (filled) {\n      setResult({ winner: \"No one\", state: \"Tie\" });\n    }\n  };\n\n  //checking for winner\n  const checkWin = () => {\n    Patterns.forEach((currentPattern) => {\n      const firstPlayer = board[currentPattern[0]];\n      if (firstPlayer === \"\") return;\n      let foundWinningPattern = true;\n      currentPattern.forEach((index) => {\n        if (board[index] !== firstPlayer) {\n          foundWinningPattern = false;\n        }\n      });\n      if (foundWinningPattern === true) {\n        setResult({ winner: player, state: \"Won\" });\n      }\n    });\n  };\n\n  //restarting game\n  const restartGame = () => {\n    setBoard([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n    setPlayer(\"X\");\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"board\">\n        <div className=\"row\">\n          <Square\n            value={board[0]}\n            chooseSquare={() => {\n              chooseSquare(0);\n            }}\n          />\n          <Square\n            value={board[1]}\n            chooseSquare={() => {\n              chooseSquare(1);\n            }}\n          />\n          <Square\n            value={board[2]}\n            chooseSquare={() => {\n              chooseSquare(2);\n            }}\n          />\n        </div>\n        <div className=\"row\">\n          <Square\n            value={board[3]}\n            chooseSquare={() => {\n              chooseSquare(3);\n            }}\n          />\n          <Square\n            value={board[4]}\n            chooseSquare={() => {\n              chooseSquare(4);\n            }}\n          />\n          <Square\n            value={board[5]}\n            chooseSquare={() => {\n              chooseSquare(5);\n            }}\n          />\n        </div>\n        <div className=\"row\">\n          <Square\n            value={board[6]}\n            chooseSquare={() => {\n              chooseSquare(6);\n            }}\n          />\n          <Square\n            value={board[7]}\n            chooseSquare={() => {\n              chooseSquare(7);\n            }}\n          />\n          <Square\n            value={board[8]}\n            chooseSquare={() => {\n              chooseSquare(8);\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}